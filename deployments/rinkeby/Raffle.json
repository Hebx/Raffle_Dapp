{
  "address": "0x0aBcA4Ee0600f11c4731A8C81d60D005FB3eCB16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_UpKeepNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callBackgasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x14f6d7678cfc73d68e95e5d869d81d7b09905aafe885eb7bb975fcba47126f4b",
  "receipt": {
    "to": null,
    "from": "0x63DB480bDA35b5D9AD029cDd0829fc5AC75e6261",
    "contractAddress": "0x0aBcA4Ee0600f11c4731A8C81d60D005FB3eCB16",
    "transactionIndex": 24,
    "gasUsed": "1331097",
    "logsBloom": "0x
    "blockHash": "0x2783df895b3a8cd60f373ddfc8f22479c0b4664064f49cff2206357cb0bffce6",
    "transactionHash": "0x14f6d7678cfc73d68e95e5d869d81d7b09905aafe885eb7bb975fcba47126f4b",
    "logs": [],
    "blockNumber": 10623479,
    "cumulativeGasUsed": "4370244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "300",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "3919",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "86ba6ffea653c079d7449ff839f92635",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_UpKeepNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callBackgasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n\\timport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\timport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n\\terror Raffle__SendMoreToEnterRaffle();\\n\\terror Raffle__NotOpen();\\n\\terror Raffle_UpKeepNeeded();\\n\\terror Raffle_TransferFailed();\\ncontract Raffle is VRFConsumerBaseV2 {\\n\\tenum RaffleState {\\n\\t\\tOpen,\\n\\t\\tCalculating\\n\\t}\\n\\n\\tRaffleState public s_raffleState;\\n\\n\\tuint256 public immutable i_entranceFee;\\n\\taddress payable[] public s_players;\\n\\tuint256 public immutable i_interval;\\n\\tuint256 public s_lastTimeStamp;\\n\\tVRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\n\\tbytes32 public i_gasLane;\\n\\tuint64 public i_subscriptionId;\\n\\tuint32 public i_callBackgasLimit;\\n\\taddress public s_recentWinner;\\n\\tuint16 public constant REQUEST_CONFIRMATIONS = 3;\\n\\tuint32 public constant NUM_WORDS = 1;\\n\\n\\tevent RaffleEnter(address indexed player);\\n\\tevent RequestRaffleWinner(uint256 indexed requestId); // player\\n\\tevent WinnerPicked(address indexed winner);\\n\\n\\tconstructor(uint256 entranceFee, uint256 interval, address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callBackGasLimit) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n\\t\\ti_entranceFee = entranceFee;\\n\\t\\ti_interval = interval;\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n\\t\\ti_gasLane = gasLane; //keyHash\\n\\t\\ti_subscriptionId = subscriptionId;\\n\\t\\ti_callBackgasLimit = callBackGasLimit;\\n\\t}\\n\\n\\tfunction enterRaffle() external payable {\\n\\t\\t// require(msg.value > i_entranceFee, \\\"Not enough money sent!\\\");\\n\\t\\tif (msg.value < i_entranceFee) {\\n\\t\\t\\trevert Raffle__SendMoreToEnterRaffle();\\n\\t\\t}\\n\\t\\t// Open, Calculate a winner\\n\\t\\tif (s_raffleState != RaffleState.Open) {\\n\\t\\t\\trevert Raffle__NotOpen();\\n\\t\\t}\\n\\t\\t// You can enter\\n\\t\\ts_players.push(payable(msg.sender));\\n\\t\\temit RaffleEnter(msg.sender);\\n\\t}\\n\\n\\t// automation of raffle\\n\\t// real random generator\\n\\t//1 Be true after some time interval\\n\\t// 2 the lottery to be open\\n\\t// 3 contract has eth\\n\\t// 4 keeps has LINK\\n\\tfunction checkUpKeep(bytes memory /* check data */ ) public view returns(bool upKeepNeeded, bytes memory /* perform data */ ) {\\n\\t\\tbool isOpen = RaffleState.Open == s_raffleState;\\n\\t\\tbool timePassed =  (block.timestamp - s_lastTimeStamp) > i_interval;// keep track of time\\n\\t\\tbool hasBalance = address(this).balance > 0;\\n\\t\\tbool hasPlayers = s_players.length > 0;\\n\\t\\tupKeepNeeded = timePassed && hasBalance && isOpen && hasPlayers;\\n\\t\\treturn (upKeepNeeded, \\\"0x0\\\");\\n\\t}\\n\\n\\tfunction performUpKeep(bytes calldata /* perform data */) external {\\n\\t\\t(bool upKeepNeeded, ) = checkUpKeep(\\\"\\\");\\n\\t\\tif (!upKeepNeeded) {\\n\\t\\t\\trevert Raffle_UpKeepNeeded();\\n\\t\\t}\\n\\t\\ts_raffleState = RaffleState.Calculating;\\n\\t\\tuint256 requestId = i_vrfCoordinator.requestRandomWords(\\n\\t\\t\\ti_gasLane,\\n\\t\\t\\ti_subscriptionId,\\n\\t\\t\\tREQUEST_CONFIRMATIONS,\\n\\t\\t\\ti_callBackgasLimit,\\n\\t\\t\\tNUM_WORDS\\n\\t\\t);\\n\\t\\temit RequestRaffleWinner(requestId);\\n\\t}\\n\\n\\tfunction fulfillRandomWords(uint256, /*requestId*/ uint256[] memory randomWords) internal override {\\n\\t\\tuint256 indexOfWinenr = randomWords[0] % s_players.length;\\n\\t\\taddress payable recentWinner = s_players[indexOfWinenr];\\n\\t\\ts_recentWinner = recentWinner;\\n\\t\\ts_players = new address payable[](0);\\n\\t\\ts_raffleState = RaffleState.Open;\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\t(bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\t\\tif(!success) {\\n\\t\\t\\trevert Raffle_TransferFailed();\\n\\t\\t}\\n\\t\\temit WinnerPicked(recentWinner);\\n\\t}\\n}\\n// Decentralized escrow for the entry fee\\n// Decentralized winner picker\\n\",\"keccak256\":\"0xfe2b12f91e24243687e7553b753ece87ef26aa707ed0d19068533e36aebd7daa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200193b3803806200193b83398181016040528101906200003891906200018f565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508460c08181525050426002819055508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260038190555081600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600460086101000a81548163ffffffff021916908363ffffffff1602179055505050505050506200031e565b6000815190506200012d816200029c565b92915050565b6000815190506200014481620002b6565b92915050565b6000815190506200015b81620002d0565b92915050565b6000815190506200017281620002ea565b92915050565b600081519050620001898162000304565b92915050565b60008060008060008060c08789031215620001af57620001ae62000297565b5b6000620001bf89828a016200014a565b9650506020620001d289828a016200014a565b9550506040620001e589828a016200011c565b9450506060620001f889828a0162000133565b93505060806200020b89828a0162000178565b92505060a06200021e89828a0162000161565b9150509295509295509295565b6000620002388262000249565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002a7816200022b565b8114620002b357600080fd5b50565b620002c1816200023f565b8114620002cd57600080fd5b50565b620002db8162000269565b8114620002e757600080fd5b50565b620002f58162000273565b81146200030157600080fd5b50565b6200030f8162000283565b81146200031b57600080fd5b50565b60805160601c60a05160c05160e05160601c6115c16200037a6000396000818161079d015261094501526000818161064d01526106f901526000818161046a01526108b60152600081816103aa01526103fe01526115c16000f3fe6080604052600436106100f35760003560e01c80636c7c8f171161008a5780638e879c8a116100595780638e879c8a146102ea578063ae771f6b14610315578063aebc455014610352578063cc45483f1461037d576100f3565b80636c7c8f171461024057806372cf6e34146102695780637ea3e6c1146102945780638638b0c6146102bf576100f3565b80634b87a0e6116100c65780634b87a0e6146101815780635e6c102e146101ac57806367f082b0146101ea5780636919207d14610215576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b578063470cdf9714610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610ecf565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d9190611180565b60405180910390f35b34801561016257600080fd5b5061016b6105db565b60405161017891906111b6565b60405180910390f35b34801561018d57600080fd5b506101966105f5565b6040516101a3919061119b565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190610e2c565b61060b565b6040516101e1929190611091565b60405180910390f35b3480156101f657600080fd5b506101ff6106f2565b60405161020c9190611165565b60405180910390f35b34801561022157600080fd5b5061022a6106f7565b6040516102379190611180565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610ddf565b61071b565b005b34801561027557600080fd5b5061027e6108af565b60405161028b919061119b565b60405180910390f35b3480156102a057600080fd5b506102a96108b4565b6040516102b69190611180565b60405180910390f35b3480156102cb57600080fd5b506102d46108d8565b6040516102e19190611032565b60405180910390f35b3480156102f657600080fd5b506102ff6108fe565b60405161030c91906110c1565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610e75565b610904565b604051610349919061104d565b60405180910390f35b34801561035e57600080fd5b50610367610943565b604051610374919061112f565b60405180910390f35b34801561038957600080fd5b50610392610967565b60405161039f919061114a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610451929190611068565b60405180910390fd5b6104648282610978565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d56114a1565b5b60008054906101000a900460ff1660018111156104f6576104f56114a1565b5b1461052d576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b600460089054906101000a900463ffffffff1681565b6000606060008060009054906101000a900460ff166001811115610632576106316114a1565b5b60006001811115610646576106456114a1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261067a919061127a565b1190506000804711905060008060018054905011905082801561069a5750815b80156106a35750835b80156106ac5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107356040518060200160405280600081525061060b565b5090508061076f576040517fbb8c839c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610794576107936114a1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016108289594939291906110dc565b602060405180830381600087803b15801561084257600080fd5b505af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190610ea2565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6001818154811061091457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600060018054905082600081518110610994576109936114d0565b5b60200260200101516109a69190611412565b90506000600182815481106109be576109bd6114d0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a4757610a466114ff565b5b604051908082528060200260200182016040528015610a755781602001602082028036833780820191505090505b5060019080519060200190610a8b929190610baa565b5060008060006101000a81548160ff02191690836001811115610ab157610ab06114a1565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ae39061101d565b60006040518083038185875af1925050503d8060008114610b20576040519150601f19603f3d011682016040523d82523d6000602084013e610b25565b606091505b5050905080610b60576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c23579160200282015b82811115610c225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bca565b5b509050610c309190610c34565b5090565b5b80821115610c4d576000816000905550600101610c35565b5090565b6000610c64610c5f846111f6565b6111d1565b90508083825260208201905082856020860282011115610c8757610c86611538565b5b60005b85811015610cb75781610c9d8882610db5565b845260208401935060208301925050600181019050610c8a565b5050509392505050565b6000610cd4610ccf84611222565b6111d1565b905082815260208101848484011115610cf057610cef61153d565b5b610cfb84828561139f565b509392505050565b600082601f830112610d1857610d17611533565b5b8135610d28848260208601610c51565b91505092915050565b60008083601f840112610d4757610d46611533565b5b8235905067ffffffffffffffff811115610d6457610d6361152e565b5b602083019150836001820283011115610d8057610d7f611538565b5b9250929050565b600082601f830112610d9c57610d9b611533565b5b8135610dac848260208601610cc1565b91505092915050565b600081359050610dc481611574565b92915050565b600081519050610dd981611574565b92915050565b60008060208385031215610df657610df5611547565b5b600083013567ffffffffffffffff811115610e1457610e13611542565b5b610e2085828601610d31565b92509250509250929050565b600060208284031215610e4257610e41611547565b5b600082013567ffffffffffffffff811115610e6057610e5f611542565b5b610e6c84828501610d87565b91505092915050565b600060208284031215610e8b57610e8a611547565b5b6000610e9984828501610db5565b91505092915050565b600060208284031215610eb857610eb7611547565b5b6000610ec684828501610dca565b91505092915050565b60008060408385031215610ee657610ee5611547565b5b6000610ef485828601610db5565b925050602083013567ffffffffffffffff811115610f1557610f14611542565b5b610f2185828601610d03565b9150509250929050565b610f34816112c0565b82525050565b610f43816112ae565b82525050565b610f52816112d2565b82525050565b610f61816112de565b82525050565b6000610f7282611253565b610f7c818561125e565b9350610f8c8185602086016113ae565b610f958161154c565b840191505092915050565b610fa981611357565b82525050565b610fb881611369565b82525050565b6000610fcb60008361126f565b9150610fd68261155d565b600082019050919050565b610fea816112fb565b82525050565b610ff981611329565b82525050565b61100881611333565b82525050565b61101781611343565b82525050565b600061102882610fbe565b9150819050919050565b60006020820190506110476000830184610f3a565b92915050565b60006020820190506110626000830184610f2b565b92915050565b600060408201905061107d6000830185610f3a565b61108a6020830184610f3a565b9392505050565b60006040820190506110a66000830185610f49565b81810360208301526110b88184610f67565b90509392505050565b60006020820190506110d66000830184610f58565b92915050565b600060a0820190506110f16000830188610f58565b6110fe602083018761100e565b61110b6040830186610fe1565b6111186060830185610fff565b6111256080830184610fff565b9695505050505050565b60006020820190506111446000830184610fa0565b92915050565b600060208201905061115f6000830184610faf565b92915050565b600060208201905061117a6000830184610fe1565b92915050565b60006020820190506111956000830184610ff0565b92915050565b60006020820190506111b06000830184610fff565b92915050565b60006020820190506111cb600083018461100e565b92915050565b60006111db6111ec565b90506111e782826113e1565b919050565b6000604051905090565b600067ffffffffffffffff821115611211576112106114ff565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561123d5761123c6114ff565b5b6112468261154c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061128582611329565b915061129083611329565b9250828210156112a3576112a2611443565b5b828203905092915050565b60006112b982611309565b9050919050565b60006112cb82611309565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112f682611560565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113628261137b565b9050919050565b6000611374826112e8565b9050919050565b60006113868261138d565b9050919050565b600061139882611309565b9050919050565b82818337600083830152505050565b60005b838110156113cc5780820151818401526020810190506113b1565b838111156113db576000848401525b50505050565b6113ea8261154c565b810181811067ffffffffffffffff82111715611409576114086114ff565b5b80604052505050565b600061141d82611329565b915061142883611329565b92508261143857611437611472565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611571576115706114a1565b5b50565b61157d81611329565b811461158857600080fd5b5056fea2646970667358221220332a1aad47b892b5ecf99194ed62e51f0881e503f78c8a2fa32338232303fec464736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80636c7c8f171161008a5780638e879c8a116100595780638e879c8a146102ea578063ae771f6b14610315578063aebc455014610352578063cc45483f1461037d576100f3565b80636c7c8f171461024057806372cf6e34146102695780637ea3e6c1146102945780638638b0c6146102bf576100f3565b80634b87a0e6116100c65780634b87a0e6146101815780635e6c102e146101ac57806367f082b0146101ea5780636919207d14610215576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b578063470cdf9714610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610ecf565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d9190611180565b60405180910390f35b34801561016257600080fd5b5061016b6105db565b60405161017891906111b6565b60405180910390f35b34801561018d57600080fd5b506101966105f5565b6040516101a3919061119b565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190610e2c565b61060b565b6040516101e1929190611091565b60405180910390f35b3480156101f657600080fd5b506101ff6106f2565b60405161020c9190611165565b60405180910390f35b34801561022157600080fd5b5061022a6106f7565b6040516102379190611180565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610ddf565b61071b565b005b34801561027557600080fd5b5061027e6108af565b60405161028b919061119b565b60405180910390f35b3480156102a057600080fd5b506102a96108b4565b6040516102b69190611180565b60405180910390f35b3480156102cb57600080fd5b506102d46108d8565b6040516102e19190611032565b60405180910390f35b3480156102f657600080fd5b506102ff6108fe565b60405161030c91906110c1565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610e75565b610904565b604051610349919061104d565b60405180910390f35b34801561035e57600080fd5b50610367610943565b604051610374919061112f565b60405180910390f35b34801561038957600080fd5b50610392610967565b60405161039f919061114a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610451929190611068565b60405180910390fd5b6104648282610978565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d56114a1565b5b60008054906101000a900460ff1660018111156104f6576104f56114a1565b5b1461052d576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b600460089054906101000a900463ffffffff1681565b6000606060008060009054906101000a900460ff166001811115610632576106316114a1565b5b60006001811115610646576106456114a1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261067a919061127a565b1190506000804711905060008060018054905011905082801561069a5750815b80156106a35750835b80156106ac5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107356040518060200160405280600081525061060b565b5090508061076f576040517fbb8c839c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610794576107936114a1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016108289594939291906110dc565b602060405180830381600087803b15801561084257600080fd5b505af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190610ea2565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6001818154811061091457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600060018054905082600081518110610994576109936114d0565b5b60200260200101516109a69190611412565b90506000600182815481106109be576109bd6114d0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a4757610a466114ff565b5b604051908082528060200260200182016040528015610a755781602001602082028036833780820191505090505b5060019080519060200190610a8b929190610baa565b5060008060006101000a81548160ff02191690836001811115610ab157610ab06114a1565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ae39061101d565b60006040518083038185875af1925050503d8060008114610b20576040519150601f19603f3d011682016040523d82523d6000602084013e610b25565b606091505b5050905080610b60576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c23579160200282015b82811115610c225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bca565b5b509050610c309190610c34565b5090565b5b80821115610c4d576000816000905550600101610c35565b5090565b6000610c64610c5f846111f6565b6111d1565b90508083825260208201905082856020860282011115610c8757610c86611538565b5b60005b85811015610cb75781610c9d8882610db5565b845260208401935060208301925050600181019050610c8a565b5050509392505050565b6000610cd4610ccf84611222565b6111d1565b905082815260208101848484011115610cf057610cef61153d565b5b610cfb84828561139f565b509392505050565b600082601f830112610d1857610d17611533565b5b8135610d28848260208601610c51565b91505092915050565b60008083601f840112610d4757610d46611533565b5b8235905067ffffffffffffffff811115610d6457610d6361152e565b5b602083019150836001820283011115610d8057610d7f611538565b5b9250929050565b600082601f830112610d9c57610d9b611533565b5b8135610dac848260208601610cc1565b91505092915050565b600081359050610dc481611574565b92915050565b600081519050610dd981611574565b92915050565b60008060208385031215610df657610df5611547565b5b600083013567ffffffffffffffff811115610e1457610e13611542565b5b610e2085828601610d31565b92509250509250929050565b600060208284031215610e4257610e41611547565b5b600082013567ffffffffffffffff811115610e6057610e5f611542565b5b610e6c84828501610d87565b91505092915050565b600060208284031215610e8b57610e8a611547565b5b6000610e9984828501610db5565b91505092915050565b600060208284031215610eb857610eb7611547565b5b6000610ec684828501610dca565b91505092915050565b60008060408385031215610ee657610ee5611547565b5b6000610ef485828601610db5565b925050602083013567ffffffffffffffff811115610f1557610f14611542565b5b610f2185828601610d03565b9150509250929050565b610f34816112c0565b82525050565b610f43816112ae565b82525050565b610f52816112d2565b82525050565b610f61816112de565b82525050565b6000610f7282611253565b610f7c818561125e565b9350610f8c8185602086016113ae565b610f958161154c565b840191505092915050565b610fa981611357565b82525050565b610fb881611369565b82525050565b6000610fcb60008361126f565b9150610fd68261155d565b600082019050919050565b610fea816112fb565b82525050565b610ff981611329565b82525050565b61100881611333565b82525050565b61101781611343565b82525050565b600061102882610fbe565b9150819050919050565b60006020820190506110476000830184610f3a565b92915050565b60006020820190506110626000830184610f2b565b92915050565b600060408201905061107d6000830185610f3a565b61108a6020830184610f3a565b9392505050565b60006040820190506110a66000830185610f49565b81810360208301526110b88184610f67565b90509392505050565b60006020820190506110d66000830184610f58565b92915050565b600060a0820190506110f16000830188610f58565b6110fe602083018761100e565b61110b6040830186610fe1565b6111186060830185610fff565b6111256080830184610fff565b9695505050505050565b60006020820190506111446000830184610fa0565b92915050565b600060208201905061115f6000830184610faf565b92915050565b600060208201905061117a6000830184610fe1565b92915050565b60006020820190506111956000830184610ff0565b92915050565b60006020820190506111b06000830184610fff565b92915050565b60006020820190506111cb600083018461100e565b92915050565b60006111db6111ec565b90506111e782826113e1565b919050565b6000604051905090565b600067ffffffffffffffff821115611211576112106114ff565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561123d5761123c6114ff565b5b6112468261154c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061128582611329565b915061129083611329565b9250828210156112a3576112a2611443565b5b828203905092915050565b60006112b982611309565b9050919050565b60006112cb82611309565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112f682611560565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113628261137b565b9050919050565b6000611374826112e8565b9050919050565b60006113868261138d565b9050919050565b600061139882611309565b9050919050565b82818337600083830152505050565b60005b838110156113cc5780820151818401526020810190506113b1565b838111156113db576000848401525b50505050565b6113ea8261154c565b810181811067ffffffffffffffff82111715611409576114086114ff565b5b80604052505050565b600061141d82611329565b915061142883611329565b92508261143857611437611472565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611571576115706114a1565b5b50565b61157d81611329565b811461158857600080fd5b5056fea2646970667358221220332a1aad47b892b5ecf99194ed62e51f0881e503f78c8a2fa32338232303fec464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)163"
      },
      {
        "astId": 171,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 182,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 184,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_callBackgasLimit",
        "offset": 8,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 186,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 12,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)163": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}