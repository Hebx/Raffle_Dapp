{
  "address": "0x3eAEA181d5CC53D53cDae06e96f29A6705C52553",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_UpKeepNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5def6bea6594c52be15b5ad48bd4bfacdfa76140b3b9fc137ca587792088aba1",
  "receipt": {
    "to": null,
    "from": "0x63DB480bDA35b5D9AD029cDd0829fc5AC75e6261",
    "contractAddress": "0x3eAEA181d5CC53D53cDae06e96f29A6705C52553",
    "transactionIndex": 9,
    "gasUsed": "1314649",
    "logsBloom": "0x
    "blockHash": "0x379a79568338cf7e3c8f6f3072dccfecbf0c1592d9567f112f9418d1a6c28a0e",
    "transactionHash": "0x5def6bea6594c52be15b5ad48bd4bfacdfa76140b3b9fc137ca587792088aba1",
    "logs": [],
    "blockNumber": 10620277,
    "cumulativeGasUsed": "4032644",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "300",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "3858",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8dcfb4c72d53573502107887714ddf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_UpKeepNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n\\timport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\timport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n\\terror Raffle__SendMoreToEnterRaffle();\\n\\terror Raffle__NotOpen();\\n\\terror Raffle_UpKeepNeeded();\\n\\terror Raffle_TransferFailed();\\ncontract Raffle is VRFConsumerBaseV2 {\\n\\tenum RaffleState {\\n\\t\\tOpen,\\n\\t\\tCalculating\\n\\t}\\n\\n\\tRaffleState public s_raffleState;\\n\\n\\tuint256 public immutable i_entranceFee;\\n\\taddress payable[] public s_players;\\n\\tuint256 public immutable i_interval;\\n\\tuint256 public s_lastTimeStamp;\\n\\tVRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\n\\tbytes32 public i_gasLane;\\n\\tuint64 public i_subscriptionId;\\n\\tuint16 public constant REQUEST_CONFIRMATIONS = 3;\\n\\tuint32 i_callBackgasLimit;\\n\\tuint32 public constant NUM_WORDS = 1;\\n\\taddress public s_recentWinner;\\n\\n\\tevent RaffleEnter(address indexed player);\\n\\tevent RequestRaffleWinner(uint256 indexed requestId);\\n\\tevent WinnerPicked(address indexed winner);\\n\\n\\tconstructor(uint256 entranceFee, uint256 interval, address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callBackGasLimit) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n\\t\\ti_entranceFee = entranceFee;\\n\\t\\ti_interval = interval;\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n\\t\\ti_gasLane = gasLane; //keyHash\\n\\t\\ti_subscriptionId = subscriptionId;\\n\\t\\ti_callBackgasLimit = callBackGasLimit;\\n\\t}\\n\\n\\tfunction enterRaffle() external payable {\\n\\t\\t// require(msg.value > i_entranceFee, \\\"Not enough money sent!\\\");\\n\\t\\tif (msg.value < i_entranceFee) {\\n\\t\\t\\trevert Raffle__SendMoreToEnterRaffle();\\n\\t\\t}\\n\\t\\t// Open, Calculate a winner\\n\\t\\tif (s_raffleState != RaffleState.Open) {\\n\\t\\t\\trevert Raffle__NotOpen();\\n\\t\\t}\\n\\t\\t// You can enter\\n\\t\\ts_players.push(payable(msg.sender));\\n\\t\\temit RaffleEnter(msg.sender);\\n\\t}\\n\\n\\t// automation of raffle\\n\\t// real random generator\\n\\t//1 Be true after some time interval\\n\\t// 2 the lottery to be open\\n\\t// 3 contract has eth\\n\\t// 4 keeps has LINK\\n\\tfunction checkUpKeep(bytes memory /* check data */ ) public view returns(bool upKeepNeeded, bytes memory /* perform data */ ) {\\n\\t\\tbool isOpen = RaffleState.Open == s_raffleState;\\n\\t\\tbool timePassed =  (block.timestamp - s_lastTimeStamp) > i_interval;// keep track of time\\n\\t\\tbool hasBalance = address(this).balance > 0;\\n\\t\\tbool hasPlayers = s_players.length > 0;\\n\\t\\tupKeepNeeded = timePassed && hasBalance && isOpen && hasPlayers;\\n\\t\\treturn (upKeepNeeded, \\\"0x0\\\");\\n\\t}\\n\\n\\tfunction performUpKeep(bytes calldata /* perform data */) external {\\n\\t\\t(bool upKeepNeeded, ) = checkUpKeep(\\\"\\\");\\n\\t\\tif (!upKeepNeeded) {\\n\\t\\t\\trevert Raffle_UpKeepNeeded();\\n\\t\\t}\\n\\t\\ts_raffleState = RaffleState.Calculating;\\n\\t\\tuint256 requestId = i_vrfCoordinator.requestRandomWords(\\n\\t\\t\\ti_gasLane,\\n\\t\\t\\ti_subscriptionId,\\n\\t\\t\\tREQUEST_CONFIRMATIONS,\\n\\t\\t\\ti_callBackgasLimit,\\n\\t\\t\\tNUM_WORDS\\n\\t\\t);\\n\\t\\temit RequestRaffleWinner(requestId);\\n\\t}\\n\\n\\tfunction fulfillRandomWords(uint256, /*requestId*/ uint256[] memory randomWords) internal override {\\n\\t\\tuint256 indexOfWinenr = randomWords[0] % s_players.length;\\n\\t\\taddress payable recentWinner = s_players[indexOfWinenr];\\n\\t\\ts_players = new address payable[](0);\\n\\t\\ts_raffleState = RaffleState.Open;\\n\\t\\ts_recentWinner = recentWinner;\\n\\t\\ts_lastTimeStamp = block.timestamp;\\n\\t\\t(bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\t\\tif(!success) {\\n\\t\\t\\trevert Raffle_TransferFailed();\\n\\t\\t}\\n\\t\\temit WinnerPicked(recentWinner);\\n\\t}\\n}\\n// Decentralized escrow for the entry fee\\n// Decentralized winner picker\\n\",\"keccak256\":\"0x15931c873ec6814f43c7e9ba653357dce8d7ace9abbc0f4bb47be518d280cfe4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620018ef380380620018ef83398181016040528101906200003891906200018f565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508460c08181525050426002819055508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260038190555081600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600460086101000a81548163ffffffff021916908363ffffffff1602179055505050505050506200031e565b6000815190506200012d816200029c565b92915050565b6000815190506200014481620002b6565b92915050565b6000815190506200015b81620002d0565b92915050565b6000815190506200017281620002ea565b92915050565b600081519050620001898162000304565b92915050565b60008060008060008060c08789031215620001af57620001ae62000297565b5b6000620001bf89828a016200014a565b9650506020620001d289828a016200014a565b9550506040620001e589828a016200011c565b9450506060620001f889828a0162000133565b93505060806200020b89828a0162000178565b92505060a06200021e89828a0162000161565b9150509295509295509295565b6000620002388262000249565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002a7816200022b565b8114620002b357600080fd5b50565b620002c1816200023f565b8114620002cd57600080fd5b50565b620002db8162000269565b8114620002e757600080fd5b50565b620002f58162000273565b81146200030157600080fd5b50565b6200030f8162000283565b81146200031b57600080fd5b50565b60805160601c60a05160c05160e05160601c6115756200037a6000396000818161075101526108f901526000818161060101526106ad015260008181610434015261086a01526000818161037401526103c801526115756000f3fe6080604052600436106100e85760003560e01c80636c7c8f171161008a5780638e879c8a116100595780638e879c8a146102b4578063ae771f6b146102df578063aebc45501461031c578063cc45483f14610347576100e8565b80636c7c8f171461020a57806372cf6e34146102335780637ea3e6c11461025e5780638638b0c614610289576100e8565b8063470cdf97116100c6578063470cdf971461014b5780635e6c102e1461017657806367f082b0146101b45780636919207d146101df576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610e83565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561059f565b6040516101429190611134565b60405180910390f35b34801561015757600080fd5b506101606105a5565b60405161016d919061116a565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190610de0565b6105bf565b6040516101ab929190611045565b60405180910390f35b3480156101c057600080fd5b506101c96106a6565b6040516101d69190611119565b60405180910390f35b3480156101eb57600080fd5b506101f46106ab565b6040516102019190611134565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610d93565b6106cf565b005b34801561023f57600080fd5b50610248610863565b604051610255919061114f565b60405180910390f35b34801561026a57600080fd5b50610273610868565b6040516102809190611134565b60405180910390f35b34801561029557600080fd5b5061029e61088c565b6040516102ab9190610fe6565b60405180910390f35b3480156102c057600080fd5b506102c96108b2565b6040516102d69190611075565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190610e29565b6108b8565b6040516103139190611001565b60405180910390f35b34801561032857600080fd5b506103316108f7565b60405161033e91906110e3565b60405180910390f35b34801561035357600080fd5b5061035c61091b565b60405161036991906110fe565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b92919061101c565b60405180910390fd5b61042e828261092c565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a05761049f611455565b5b60008054906101000a900460ff1660018111156104c0576104bf611455565b5b146104f7576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff1660018111156105e6576105e5611455565b5b600060018111156105fa576105f9611455565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261062e919061122e565b1190506000804711905060008060018054905011905082801561064e5750815b80156106575750835b80156106605750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006106e9604051806020016040528060008152506105bf565b50905080610723576040517fbb8c839c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff0219169083600181111561074857610747611455565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016107dc959493929190611090565b602060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190610e56565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600181815481106108c857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b60006001805490508260008151811061094857610947611484565b5b602002602001015161095a91906113c6565b905060006001828154811061097257610971611484565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff8111156109ba576109b96114b3565b5b6040519080825280602002602001820160405280156109e85781602001602082028036833780820191505090505b50600190805190602001906109fe929190610b5e565b5060008060006101000a81548160ff02191690836001811115610a2457610a23611455565b5b0217905550806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9790610fd1565b60006040518083038185875af1925050503d8060008114610ad4576040519150601f19603f3d011682016040523d82523d6000602084013e610ad9565b606091505b5050905080610b14576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bd7579160200282015b82811115610bd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7e565b5b509050610be49190610be8565b5090565b5b80821115610c01576000816000905550600101610be9565b5090565b6000610c18610c13846111aa565b611185565b90508083825260208201905082856020860282011115610c3b57610c3a6114ec565b5b60005b85811015610c6b5781610c518882610d69565b845260208401935060208301925050600181019050610c3e565b5050509392505050565b6000610c88610c83846111d6565b611185565b905082815260208101848484011115610ca457610ca36114f1565b5b610caf848285611353565b509392505050565b600082601f830112610ccc57610ccb6114e7565b5b8135610cdc848260208601610c05565b91505092915050565b60008083601f840112610cfb57610cfa6114e7565b5b8235905067ffffffffffffffff811115610d1857610d176114e2565b5b602083019150836001820283011115610d3457610d336114ec565b5b9250929050565b600082601f830112610d5057610d4f6114e7565b5b8135610d60848260208601610c75565b91505092915050565b600081359050610d7881611528565b92915050565b600081519050610d8d81611528565b92915050565b60008060208385031215610daa57610da96114fb565b5b600083013567ffffffffffffffff811115610dc857610dc76114f6565b5b610dd485828601610ce5565b92509250509250929050565b600060208284031215610df657610df56114fb565b5b600082013567ffffffffffffffff811115610e1457610e136114f6565b5b610e2084828501610d3b565b91505092915050565b600060208284031215610e3f57610e3e6114fb565b5b6000610e4d84828501610d69565b91505092915050565b600060208284031215610e6c57610e6b6114fb565b5b6000610e7a84828501610d7e565b91505092915050565b60008060408385031215610e9a57610e996114fb565b5b6000610ea885828601610d69565b925050602083013567ffffffffffffffff811115610ec957610ec86114f6565b5b610ed585828601610cb7565b9150509250929050565b610ee881611274565b82525050565b610ef781611262565b82525050565b610f0681611286565b82525050565b610f1581611292565b82525050565b6000610f2682611207565b610f308185611212565b9350610f40818560208601611362565b610f4981611500565b840191505092915050565b610f5d8161130b565b82525050565b610f6c8161131d565b82525050565b6000610f7f600083611223565b9150610f8a82611511565b600082019050919050565b610f9e816112af565b82525050565b610fad816112dd565b82525050565b610fbc816112e7565b82525050565b610fcb816112f7565b82525050565b6000610fdc82610f72565b9150819050919050565b6000602082019050610ffb6000830184610eee565b92915050565b60006020820190506110166000830184610edf565b92915050565b60006040820190506110316000830185610eee565b61103e6020830184610eee565b9392505050565b600060408201905061105a6000830185610efd565b818103602083015261106c8184610f1b565b90509392505050565b600060208201905061108a6000830184610f0c565b92915050565b600060a0820190506110a56000830188610f0c565b6110b26020830187610fc2565b6110bf6040830186610f95565b6110cc6060830185610fb3565b6110d96080830184610fb3565b9695505050505050565b60006020820190506110f86000830184610f54565b92915050565b60006020820190506111136000830184610f63565b92915050565b600060208201905061112e6000830184610f95565b92915050565b60006020820190506111496000830184610fa4565b92915050565b60006020820190506111646000830184610fb3565b92915050565b600060208201905061117f6000830184610fc2565b92915050565b600061118f6111a0565b905061119b8282611395565b919050565b6000604051905090565b600067ffffffffffffffff8211156111c5576111c46114b3565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111f1576111f06114b3565b5b6111fa82611500565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611239826112dd565b9150611244836112dd565b925082821015611257576112566113f7565b5b828203905092915050565b600061126d826112bd565b9050919050565b600061127f826112bd565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112aa82611514565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113168261132f565b9050919050565b60006113288261129c565b9050919050565b600061133a82611341565b9050919050565b600061134c826112bd565b9050919050565b82818337600083830152505050565b60005b83811015611380578082015181840152602081019050611365565b8381111561138f576000848401525b50505050565b61139e82611500565b810181811067ffffffffffffffff821117156113bd576113bc6114b3565b5b80604052505050565b60006113d1826112dd565b91506113dc836112dd565b9250826113ec576113eb611426565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061152557611524611455565b5b50565b611531816112dd565b811461153c57600080fd5b5056fea264697066735822122080a456b3032a780bea8733eb5ee1238acf48033fe291bed7328ef48b9cf950f264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80636c7c8f171161008a5780638e879c8a116100595780638e879c8a146102b4578063ae771f6b146102df578063aebc45501461031c578063cc45483f14610347576100e8565b80636c7c8f171461020a57806372cf6e34146102335780637ea3e6c11461025e5780638638b0c614610289576100e8565b8063470cdf97116100c6578063470cdf971461014b5780635e6c102e1461017657806367f082b0146101b45780636919207d146101df576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610e83565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561059f565b6040516101429190611134565b60405180910390f35b34801561015757600080fd5b506101606105a5565b60405161016d919061116a565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190610de0565b6105bf565b6040516101ab929190611045565b60405180910390f35b3480156101c057600080fd5b506101c96106a6565b6040516101d69190611119565b60405180910390f35b3480156101eb57600080fd5b506101f46106ab565b6040516102019190611134565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610d93565b6106cf565b005b34801561023f57600080fd5b50610248610863565b604051610255919061114f565b60405180910390f35b34801561026a57600080fd5b50610273610868565b6040516102809190611134565b60405180910390f35b34801561029557600080fd5b5061029e61088c565b6040516102ab9190610fe6565b60405180910390f35b3480156102c057600080fd5b506102c96108b2565b6040516102d69190611075565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190610e29565b6108b8565b6040516103139190611001565b60405180910390f35b34801561032857600080fd5b506103316108f7565b60405161033e91906110e3565b60405180910390f35b34801561035357600080fd5b5061035c61091b565b60405161036991906110fe565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b92919061101c565b60405180910390fd5b61042e828261092c565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a05761049f611455565b5b60008054906101000a900460ff1660018111156104c0576104bf611455565b5b146104f7576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff1660018111156105e6576105e5611455565b5b600060018111156105fa576105f9611455565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261062e919061122e565b1190506000804711905060008060018054905011905082801561064e5750815b80156106575750835b80156106605750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006106e9604051806020016040528060008152506105bf565b50905080610723576040517fbb8c839c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff0219169083600181111561074857610747611455565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016107dc959493929190611090565b602060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190610e56565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600181815481106108c857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b60006001805490508260008151811061094857610947611484565b5b602002602001015161095a91906113c6565b905060006001828154811061097257610971611484565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff8111156109ba576109b96114b3565b5b6040519080825280602002602001820160405280156109e85781602001602082028036833780820191505090505b50600190805190602001906109fe929190610b5e565b5060008060006101000a81548160ff02191690836001811115610a2457610a23611455565b5b0217905550806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9790610fd1565b60006040518083038185875af1925050503d8060008114610ad4576040519150601f19603f3d011682016040523d82523d6000602084013e610ad9565b606091505b5050905080610b14576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bd7579160200282015b82811115610bd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7e565b5b509050610be49190610be8565b5090565b5b80821115610c01576000816000905550600101610be9565b5090565b6000610c18610c13846111aa565b611185565b90508083825260208201905082856020860282011115610c3b57610c3a6114ec565b5b60005b85811015610c6b5781610c518882610d69565b845260208401935060208301925050600181019050610c3e565b5050509392505050565b6000610c88610c83846111d6565b611185565b905082815260208101848484011115610ca457610ca36114f1565b5b610caf848285611353565b509392505050565b600082601f830112610ccc57610ccb6114e7565b5b8135610cdc848260208601610c05565b91505092915050565b60008083601f840112610cfb57610cfa6114e7565b5b8235905067ffffffffffffffff811115610d1857610d176114e2565b5b602083019150836001820283011115610d3457610d336114ec565b5b9250929050565b600082601f830112610d5057610d4f6114e7565b5b8135610d60848260208601610c75565b91505092915050565b600081359050610d7881611528565b92915050565b600081519050610d8d81611528565b92915050565b60008060208385031215610daa57610da96114fb565b5b600083013567ffffffffffffffff811115610dc857610dc76114f6565b5b610dd485828601610ce5565b92509250509250929050565b600060208284031215610df657610df56114fb565b5b600082013567ffffffffffffffff811115610e1457610e136114f6565b5b610e2084828501610d3b565b91505092915050565b600060208284031215610e3f57610e3e6114fb565b5b6000610e4d84828501610d69565b91505092915050565b600060208284031215610e6c57610e6b6114fb565b5b6000610e7a84828501610d7e565b91505092915050565b60008060408385031215610e9a57610e996114fb565b5b6000610ea885828601610d69565b925050602083013567ffffffffffffffff811115610ec957610ec86114f6565b5b610ed585828601610cb7565b9150509250929050565b610ee881611274565b82525050565b610ef781611262565b82525050565b610f0681611286565b82525050565b610f1581611292565b82525050565b6000610f2682611207565b610f308185611212565b9350610f40818560208601611362565b610f4981611500565b840191505092915050565b610f5d8161130b565b82525050565b610f6c8161131d565b82525050565b6000610f7f600083611223565b9150610f8a82611511565b600082019050919050565b610f9e816112af565b82525050565b610fad816112dd565b82525050565b610fbc816112e7565b82525050565b610fcb816112f7565b82525050565b6000610fdc82610f72565b9150819050919050565b6000602082019050610ffb6000830184610eee565b92915050565b60006020820190506110166000830184610edf565b92915050565b60006040820190506110316000830185610eee565b61103e6020830184610eee565b9392505050565b600060408201905061105a6000830185610efd565b818103602083015261106c8184610f1b565b90509392505050565b600060208201905061108a6000830184610f0c565b92915050565b600060a0820190506110a56000830188610f0c565b6110b26020830187610fc2565b6110bf6040830186610f95565b6110cc6060830185610fb3565b6110d96080830184610fb3565b9695505050505050565b60006020820190506110f86000830184610f54565b92915050565b60006020820190506111136000830184610f63565b92915050565b600060208201905061112e6000830184610f95565b92915050565b60006020820190506111496000830184610fa4565b92915050565b60006020820190506111646000830184610fb3565b92915050565b600060208201905061117f6000830184610fc2565b92915050565b600061118f6111a0565b905061119b8282611395565b919050565b6000604051905090565b600067ffffffffffffffff8211156111c5576111c46114b3565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111f1576111f06114b3565b5b6111fa82611500565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611239826112dd565b9150611244836112dd565b925082821015611257576112566113f7565b5b828203905092915050565b600061126d826112bd565b9050919050565b600061127f826112bd565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112aa82611514565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113168261132f565b9050919050565b60006113288261129c565b9050919050565b600061133a82611341565b9050919050565b600061134c826112bd565b9050919050565b82818337600083830152505050565b60005b83811015611380578082015181840152602081019050611365565b8381111561138f576000848401525b50505050565b61139e82611500565b810181811067ffffffffffffffff821117156113bd576113bc6114b3565b5b80604052505050565b60006113d1826112dd565b91506113dc836112dd565b9250826113ec576113eb611426565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061152557611524611455565b5b50565b611531816112dd565b811461153c57600080fd5b5056fea264697066735822122080a456b3032a780bea8733eb5ee1238acf48033fe291bed7328ef48b9cf950f264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)163"
      },
      {
        "astId": 171,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 182,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 187,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_callBackgasLimit",
        "offset": 8,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 192,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 12,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)163": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}